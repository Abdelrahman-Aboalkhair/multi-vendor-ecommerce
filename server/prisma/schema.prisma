generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
  SUPERADMIN
  VENDOR
}

enum TRANSACTION_STATUS {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  CANCELED
  RETURNED
  REFUNDED
}

enum PAYMENT_STATUS {
  PENDING
  PAID
  CANCELED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum CART_STATUS {
  ACTIVE
  ABANDONED
  CONVERTED
}

enum VENDOR_STATUS {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model User {
  id                              String        @id @default(uuid())
  googleId                        String?
  twitterId                       String?
  facebookId                      String?
  email                           String        @unique
  password                        String?
  name                            String
  avatar                          String?
  emailVerified                   Boolean       @default(false)
  emailVerificationToken          String?
  emailVerificationTokenExpiresAt DateTime?
  resetPasswordToken              String?
  resetPasswordTokenExpiresAt     DateTime?
  role                            ROLE          @default(USER)
  vendor                          Vendor?       @relation("UserVendor")
  orders                          Order[]
  payments                        Payment[]
  addresses                       Address[]
  interactions                    Interaction[]
  reports                         Report[]
  reviews                         Review[]
  carts                           Cart[]
  cartEvents                      CartEvent[]
  createdAt                       DateTime      @default(now())
  updatedAt                       DateTime      @updatedAt

  @@index([email])
}

model Vendor {
  id            String          @id @default(uuid())
  user          User            @relation("UserVendor", fields: [userId], references: [id], onDelete: Cascade)
  userId        String          @unique
  storeName     String          @unique
  slug          String          @unique
  description   String?
  logo          String?
  contact       String?
  businessDetails Json?
  status        VENDOR_STATUS   @default(PENDING)
  products      Product[]
  orders        Order[]
  payouts       Payout[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  StockMovement StockMovement[]
  Restock       Restock[]
  OrderItem     OrderItem[]
  CartItem      CartItem[]

  @@index([userId, storeName, slug])
}

model Product {
  id             String          @id @default(uuid())
  name           String          @unique
  description    String?
  price          Float
  discount       Float           @default(0)
  slug           String          @unique
  images         String[]
  stock          Int
  salesCount     Int             @default(0)
  sku            String?
  isNew          Boolean         @default(false)
  isFeatured     Boolean         @default(false)
  isTrending     Boolean         @default(false)
  isBestSeller   Boolean         @default(false)
  averageRating  Float           @default(0)
  reviewCount    Int             @default(0)
  category       Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId     String?
  vendor         Vendor?         @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  vendorId       String?
  orderItems     OrderItem[]
  cartItems      CartItem[]
  interactions   Interaction[]
  reviews        Review[]
  stockMovements StockMovement[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Restock        Restock[]

  @@index([name, slug, vendorId])
}

model StockMovement {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  vendorId  String?
  vendor    Vendor?  @relation(fields: [vendorId], references: [id])
  quantity  Int
  reason    String
  userId    String?
  createdAt DateTime @default(now())
}

model Restock {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  vendorId  String?
  vendor    Vendor?  @relation(fields: [vendorId], references: [id])
  quantity  Int
  notes     String?
  userId    String?
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId, userId])
}

model Order {
  id          String       @id @default(uuid())
  amount      Float
  orderDate   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  vendor      Vendor?      @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  vendorId    String?
  orderItems  OrderItem[]
  payment     Payment?     @relation("OrderPayment")
  address     Address?     @relation("OrderAddress")
  shipment    Shipment?    @relation("OrderShipment")
  transaction Transaction? @relation("OrderTransaction")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId, vendorId])
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  vendorId  String?
  vendor    Vendor?  @relation(fields: [vendorId], references: [id])
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId, productId, vendorId])
}

model Payment {
  id        String         @id @default(uuid())
  method    String
  amount    Float
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  order     Order?         @relation("OrderPayment", fields: [orderId], references: [id], onDelete: SetNull)
  orderId   String?        @unique
  status    PAYMENT_STATUS @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([userId, orderId])
}

model Address {
  id        String   @id @default(uuid())
  city      String
  state     String
  country   String
  zip       String
  street    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  order     Order?   @relation("OrderAddress", fields: [orderId], references: [id], onDelete: SetNull)
  orderId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, orderId])
}

model Shipment {
  id             String    @id @default(uuid())
  carrier        String
  trackingNumber String
  shippedDate    DateTime
  deliveryDate   DateTime?
  order          Order     @relation("OrderShipment", fields: [orderId], references: [id], onDelete: Cascade)
  orderId        String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([orderId])
}

model Transaction {
  id                 String             @id @default(uuid())
  order              Order              @relation("OrderTransaction", fields: [orderId], references: [id], onDelete: Cascade)
  orderId            String             @unique
  status             TRANSACTION_STATUS @default(PENDING)
  transactionDate    DateTime           @default(now())
  vendorPayoutAmount Float?             @default(0)
  platformCommission Float?             @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@index([orderId])
}

enum PAYOUT_STATUS {
  PENDING
  COMPLETED
  FAILED
}

model Payout {
  id            String        @id @default(uuid())
  vendor        Vendor        @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId      String
  amount        Float
  status        PAYOUT_STATUS @default(PENDING) // e.g., PENDING, COMPLETED, FAILED
  payoutDate    DateTime?
  transactionId String? // Reference to payment provider transaction
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([vendorId])
}

model Cart {
  id         String      @id @default(uuid())
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  sessionId  String?     @unique
  cartItems  CartItem[]
  cartEvents CartEvent[]
  status     CART_STATUS @default(ACTIVE)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([userId, sessionId])
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  vendorId  String?
  vendor    Vendor?  @relation(fields: [vendorId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([cartId, productId, vendorId])
}

enum CART_EVENT {
  PENDING
  ADD
  CHECKOUT_STARTED
  CHECKOUT_COMPLETED
}

model CartEvent {
  id        String     @id @default(uuid())
  cartId    String
  userId    String?
  sessionId String?
  eventType CART_EVENT @default(PENDING)
  timestamp DateTime   @default(now())
  cart      Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id])
}

model Category {
  id          String    @id @default(uuid())
  slug        String    @unique
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name, slug])
}

model Interaction {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String?
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  type      String
  createdAt DateTime @default(now())

  @@index([userId, sessionId, productId])
}

model Report {
  id         String   @id @default(uuid())
  type       String
  format     String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  parameters Json
  filePath   String?

  @@index([userId])
}

model Log {
  id        String   @id @default(uuid())
  level     String
  message   String
  context   Json?
  createdAt DateTime @default(now())
}

enum SECTION_TYPE {
  HERO
  PROMOTIONAL
  BENEFITS
  NEW_ARRIVALS
}

model Section {
  id             Int          @id @unique @default(autoincrement())
  type           SECTION_TYPE @default(HERO)
  title          String?
  description    String?
  images         String[]     @default([])
  icons          String?
  link           String?
  ctaText        String?
  isVisible      Boolean?     @default(false)
  primaryColor   String?
  secondaryColor String?
}
